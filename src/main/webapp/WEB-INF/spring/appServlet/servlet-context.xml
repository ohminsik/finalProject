<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd
		http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />
	
	<!-- 인터셉터 등록 -->
	<interceptors>
		<interceptor>
			<!-- 인터셉터 처리되는 URL -->
			<mapping path="/admin/**"/>
			
			<!-- 인터셉터 제외 URL 매핑 -->
			<exclude-mapping path="/admin/login"/>
			
			<!-- 인터셉터 빈 등록 -->
			<beans:bean class="com.fm.www.Interceptor.AdminInterceptor"></beans:bean>
		</interceptor>
	</interceptors>

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/uploadImg/**" location="/uploadImg/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="1"></beans:property>
	</beans:bean>
	
	<!-- 스프링 빈 기반의 ViewResolver  -->
	<beans:bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<beans:property name="order" value="0"></beans:property>
	</beans:bean>
	
	<!-- JSON 응답을 위한 jsonView 빈 등록 -->
	<beans:bean id="jsonView" class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">
		<beans:property name="contentType" value="application/json;charset=utf-8"></beans:property>
	</beans:bean>
  <!-- NaverLoginBO Class에 대한 Bean설정 추가 -->
    <beans:bean id="naverLoginBO" class="com.fm.www.controller.NaverLoginBO" />
	<!-- 파일 요청 파라미터 처리 리졸버 -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="10485760"></beans:property>
		<beans:property name="maxInMemorySize" value="1048576"></beans:property>				
	</beans:bean>
	   <!--  webhandlers -->
   <beans:bean id="chatEchoHandler" class="com.fm.www.handler.chatEchoHandler" />

	<websocket:handlers>
	 <websocket:mapping handler="chatEchoHandler" path="/chatEcho" />
	 <websocket:handshake-interceptors>
	      <beans:bean
	          class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor"/>
	 </websocket:handshake-interceptors>
	</websocket:handlers>
	<context:component-scan base-package="com.fm.www" />
	
	
	
</beans:beans>
