<?xml version="1.0" encoding="UTF-8"?>
<!-- 마이바티스 3 Mapper DOCTYPE -->
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <!-- 매퍼 설정 -->
  <mapper namespace="com.fm.www.dao.face.MypageDao">
  	<!-- 유저가 가진 팀 넘버 가져오기 -->
  	<select id="getUserTeamNo" resultType="String" parameterType="com.fm.www.dto.User">
  		select team_no from user_tb
  		WHERE user_no = #{user_no}
  	</select>  
  
  	<!-- 팀생성 -->
  	<insert id="insertTeam" parameterType="com.fm.www.dto.Team">
  		INSERT INTO team_tb(team_no, team_name, team_cnt, team_region, team_age, team_type, team_level, team_uniform, team_field, team_mark, team_hello, team_YN)
  		VALUES(team_tb_SEQ.nextVal, #{team_name}, #{team_cnt}, #{team_region}, #{team_age}, #{team_type}, #{team_level}, #{team_uniform}, #{team_field}, #{team_mark}, #{team_hello}, #{team_YN})
  	</insert>
  	
  	<!-- 팀넘버 가져오기 -->
  	<select id="selectTeamNo" resultType="int" parameterType="com.fm.www.dto.Team">
  		SELECT team_no from team_tb
  		WHERE team_name Like #{team_name}
  	</select>
  	<!-- 유저번호에 팀가입 날짜 넣어주기 -->
  	<update id="updateTeamDate" parameterType="com.fm.www.dto.User">
  		UPDATE user_tb set user_team_date = SYSDATE
		WHERE 1=1 AND user_no = #{user_no}
  	</update>
  	<!-- 유저번호에 팀번호 넣어주기 -->
  	<update id="updateTeamNo" parameterType="com.fm.www.dto.User">
  		UPDATE user_tb set team_no = #{team_no}
		WHERE 1=1 AND user_no = #{user_no}
  	</update>
  	
  	<!-- 유저번호로 팀번호 가져오기 -->
  	<select id="selectTeamNoUserNo" parameterType="com.fm.www.dto.User" resultType="int">
  		select team_no from user_tb
  		WHERE 1=1
  		AND user_no = #{user_no}  	
  	</select>
  	<!-- 팀정보 조회 -->
  	<select id="selectTeamInfoMation" parameterType="com.fm.www.dto.User" resultType="com.fm.www.dto.Team">
  		select * from team_tb
  		WHERE 1=1
  		AND team_no = #{team_no}  	
  	</select>
  	
  	<!-- 팀번호로 팀소속유저들 조회 -->
  	<select id="selectTeamUserList" parameterType="int" resultType="com.fm.www.dto.User">
  		select * from user_tb
  		WHERE 1=1
  		AND team_no = #{team_no}
  		ORDER BY user_no
  	</select>
  	
  	<!-- 유저번호로 유저정보 조회 -->
  	<select id="selectUserInformation" parameterType="int" resultType="com.fm.www.dto.User">
  		SELECT * FROM user_tb
  		WHERE 1=1
  		AND user_no = #{user_no}
  	</select>
  	
  	<!-- //유저번호와 유저비밀번호로 비밀번호가 맞는지 조회 -->
	<select id="checkPw" parameterType="com.fm.www.dto.User" resultType="int">
		SELECT COUNT(*) FROM user_tb
		WHERE 1=1
		AND user_no = #{user_no}
		AND user_pw = #{user_pw}
	</select>
	
	<!-- 유저비밀번호 변경 -->
	<update id="pwChange" parameterType="com.fm.www.dto.User">
		UPDATE user_tb set user_pw = #{user_pw}
		WHERE 1=1 AND user_no = #{user_no}
	</update>
	
	<!-- 유저정보 업데이트 -->
	<update id="updateMemberInfo" parameterType="com.fm.www.dto.User">
		UPDATE user_tb set user_email = #{user_email}, user_phone = #{user_phone}, user_region = #{user_region}
		WHERE 1=1 AND user_no = #{user_no}
	</update>
	
	
	<!-- 내가 쓴 게시글 총 갯수 가져오기 -->
	<select id="getTotalCountSearch" resultType="int">
		SELECT COUNT(*) from board_tb
		WHERE 1=1
		<choose>
         <when test="p2 == '제목'">
		 	AND board_title Like '%' || #{p3} || '%'
		 </when>
		 <when test="p2 == '내용'">
		 	AND board_content Like '%' || #{p3} || '%'
		 </when>
		 </choose>
		AND user_no = #{p1.user_no}
		AND delete_yn = 'N'
	</select>
	
	<!-- 내가 쓴 게시글 리스트 가져오기 -->
	<select id="getPagingListSearch" resultType="com.fm.www.dto.Board_tb">
		SELECT * FROM (
	       SELECT rownum rnum, M.* FROM (
	         SELECT B.*
	          FROM board_tb B
	          WHERE 1=1 
	          <choose>
	          <when test="p3 == '제목'">
			  	AND board_title Like '%' || #{p4} || '%'
			  </when>
			  <when test="p3 == '내용'">
			  	AND board_content Like '%' || #{p4} || '%'
			  </when>
			  </choose>
	          AND user_no = #{p1.user_no}
			  AND delete_yn = 'N'
	          ORDER BY board_no desc
	       ) M
	       ORDER BY rnum
	      ) R
	      WHERE rnum BETWEEN #{p2.startNo} AND #{p2.endNo}
	</select>
	
	<!-- 게시글 댓글수 조회해오기 -->
	<select id="getBoardReplyCnt" resultType="int" parameterType="int">
		select COUNT(*) FROM board_reply
		WHERE board_no = #{board_no}
	</select>
	
	<!-- 내게온 메세지 조회 -->
	<select id="selectMessage" resultType="com.fm.www.dto.Message" parameterType="com.fm.www.dto.User">
		SELECT R.*, mt.* FROM message_tb mt,
		    (select U.user_name AS reciveruser_name, U.user_id AS reciveruser_id
		        FROM user_tb u
		        WHERE user_no = #{user_no}
		        ) R
		WHERE 1=1  

		ORDER BY message_date DESC
	</select>
	<!-- 내게 온 메세지 보낸사람 정보 조회 -->
	<select id="getSendUserId" resultType="String" parameterType="int">
		select user_id from user_tb
		WHERE 1=1
		AND user_no = #{senduser_no}
	</select>
	<select id="getSendUserName" resultType="String" parameterType="int">
		select user_name from user_tb
		WHERE 1=1
		AND user_no = #{senduser_no}
	</select>
	<!-- 메세지 확인으로 변경 -->
	<update id="updateMessageYn" parameterType="int">
		UPDATE message_tb set message_YN = 'Y'
		WHERE 1=1 AND message_no = #{messageno}
	</update>
	<!-- 메세지 삭제 -->
	<delete id="deleteMessage" parameterType="int">
		DELETE from message_tb
		WHERE 1=1 AND message_no = #{messageno}
	</delete>
	<!-- 개인메세지 답장 -->
	<insert id="replyMessage" parameterType="com.fm.www.dto.Message">
		INSERT INTO message_tb(message_no, RECIVERUSER_NO, SENDUSER_NO, MESSAGE_CONTENT, MESSAGE_DATE, message_YN)
		values(message_tb_SEQ.nextVal, #{reciveruser_no}, #{senduser_no}, #{message_content}, sysdate, 'N')
	</insert>
	
	
	<!-- 팀 번호로 팀게시판 총 게시글 수 얻어오기 -->
	<select id="getTotalCountSearchTeam" resultType="int">
		select COUNT(*) from board_tb b,user_tb u,(
		    select * from team_board 
		    WHERE 1=1
		    AND team_no = ${p1}
		)tb
		WHERE 1=1
		AND board_div = 8
		<choose>
         <when test="p2 == '제목'">
		 	AND board_title Like '%' || #{p3} || '%'
		 </when>
		 <when test="p2 == '내용'">
		 	AND board_content Like '%' || #{p3} || '%'
		 </when>
		 <when test="p2 == '작성자'">
		 	AND user_nick Like '%' || #{p3} || '%'
		 </when>
		 </choose>
		AND tb.board_no = b.board_no
		AND u.user_no = b.user_no
	</select>
	
	<!-- 팀 번호로 팀게시판 총 게시글 얻어오기 -->
	<select id="getPagingListSearchTeam" resultType="com.fm.www.dto.Board_tb">		
		SELECT * FROM (
		    SELECT rownum rnum, M.* FROM (
		        select b.*, u.user_nick from board_tb b, user_tb u,(
		            select * from team_board 
		                    WHERE 1=1                
		                    AND team_no = #{p1}
		                )tb
		                    WHERE 1=1
		                    AND board_div = 8
		                   <choose>
					         <when test="p3 == '제목'">
							 	AND board_title Like '%' || #{p4} || '%'
							 </when>
							 <when test="p3 == '내용'">
							 	AND board_content Like '%' || #{p4} || '%'
							 </when>
							 <when test="p3 == '작성자'">
							 	AND user_nick Like '%' || #{p4} || '%'
							 </when>
							 </choose>
		                    AND tb.board_no = b.board_no
		                    AND u.user_no = b.user_no
		                     order by b.board_no desc
		                    
		            ) M
		        ORDER BY rnum
		    ) R
		 WHERE rnum BETWEEN #{p2.startNo} AND #{p2.endNo}
	</select>
	
	<!-- 다음 팀게시판 글번호 얻어오기 -->
	<select id="teamBoardGetBoard_no" resultType="int">
  		SELECT board_tb_seq.nextval FROM dual
  	</select> 	
  
  	 
 	 <!-- 팀게시글 작성 -->
	<insert id="teamBoardInsertWrite" parameterType="com.fm.www.dto.Board_tb">
	  	INSERT INTO board_tb(BOARD_NO, USER_NO, BOARD_DIV, BOARD_TITLE, BOARD_CONTENT, DELETE_YN, BOARD_DATE, BOARD_CNT) 
		VALUES( #{board_no}, #{user_no}, 8, #{board_title}, #{board_content}, 'N' , sysdate, 0 )
	</insert>
	
  	<!-- 팀 포토 인써트 -->
  	<insert id="teamBoardInsertPhoto" parameterType="com.fm.www.dto.Photo">	  	
  		INSERT INTO photo (PHOTO_NO,PHOTO_ORIGIN,PHOTO_STORED,BOARD_FG,BOARD_NO,PHOTO_DELETE_YN)
  		VALUES (photo_seq.nextval, #{photo_origin }, #{photo_stored }, 8, #{board_no }, 'N')
  	</insert>
  	<!-- 팀게시글 포토 없을때 -->
  	<insert id="teamBoardInsertWrite2" parameterType="com.fm.www.dto.Board_tb">
      insert into board_tb (board_no, board_div, board_title, board_content, board_cnt, delete_yn, user_no, board_date)
         values(board_tb_seq.nextval,  8, #{board_title }, #{board_content } , 0 ,'N', #{user_no }, sysdate )
    </insert>
    <!-- teamBoard 추가 -->
    <insert id="teamBoardInsertTeamBoard">
    	insert into team_board (team_no, user_no, board_fg, board_no) VALUES (#{p2.team_no},#{p2.user_no}, 8, #{p1.board_no})
    </insert>
    
    
   
   
    
    <!-- //조회수증가 -->
	<update id="teamBoardUpHit" parameterType="int">
      update board_tb
      set board_cnt = board_cnt +1
      where board_no = #{board_no} 
   </update>
	
	<!-- //게시글 정보 가져오기 -->
	<select id="teamBoardView" parameterType="com.fm.www.dto.Board_tb" resultType="com.fm.www.dto.Board_tb">
      select * from board_tb
      where board_no = #{board_no}
   </select>
	<!-- //사진 가져오기 -->
	<select id="teamBoardPhotoView" parameterType="com.fm.www.dto.Photo" resultType="com.fm.www.dto.Photo">
      select * from photo
      where board_no = #{board_no}
   </select>
	<!-- //댓글리스트 가졍오기 -->
	<select id="ReplyList" parameterType="com.fm.www.dto.Board_Reply" resultType="com.fm.www.dto.Board_Reply">
      select * from board_reply B
      JOIN USER_TB U ON(U.USER_NO = B.USER_NO)
      where reply_delete_yn = 'N'
      and board_no = #{board_no}
   </select>

  </mapper>